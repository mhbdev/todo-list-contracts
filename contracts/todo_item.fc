#include "imports/stdlib.fc";

global int init?;
global int index;
global slice list_address;
global slice owner;
global cell content;
global int checked;
global int creation_date;

() load_data() impure inline {
    slice ds = get_data().begin_parse();

    index              = ds~load_uint(64);
    list_address       = ds~load_msg_addr();
    init?              = false;

    if (ds.slice_bits() > 0) {
        init?             = true;
        checked           = ds~load_int(1);
        creation_date     = ds~load_uint(32);
        owner             = ds~load_msg_addr();
        content           = ds~load_ref();
    }
}

() save_data() impure inline {
    set_data(
        begin_cell()
        .store_uint(index, 64)
        .store_slice(list_address)
        .store_int(checked, 1)
        .store_uint(creation_date, 32)
        .store_slice(owner)
        .store_ref(content)
        .end_cell()
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) {  ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    load_data(); ;; we load data from storage to our global variables

    if (~ init?) {
        ;; only contract which can create a to-do item and provide it's data, is our to-do list contrarct
        throw_unless(405, equal_slices(list_address, sender_address));

        ;; initially unchecked
        checked            = false;
        creation_date      = now();
        owner              = in_msg_body~load_msg_addr();
        content            = in_msg_body~load_ref();

        save_data();

        return ();
    }

    ;; check if the sender of this message is the owner of this specific item
    throw_unless(401, equal_slices(sender_address, owner));

    ;; loading operation code that shows which operations is being called
    int op = in_msg_body~load_uint(32);

    if(op == 1) {
        ;; owner can update the content using this operation
        content = in_msg_body~load_ref();
        save_data();
        return ();
    } elseif(op == 2) {
        ;; owner can check or uncheck this item (toggling check flag)
        checked = ~ checked;
        save_data();
        return ();
    } elseif (op == 3) {
        ;; the owner can do whatever YOU want :)
        return ();
    }
}

;; Get Methods

(int, int, slice, slice, cell) get_storage_data() method_id {
    load_data();
    return (init?, index, list_address, owner, content);
}